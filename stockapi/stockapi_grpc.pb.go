// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: stockapi/stockapi.proto

package stockapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockPredictionClient is the client API for StockPrediction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockPredictionClient interface {
	GetStock(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (*APIReturn, error)
}

type stockPredictionClient struct {
	cc grpc.ClientConnInterface
}

func NewStockPredictionClient(cc grpc.ClientConnInterface) StockPredictionClient {
	return &stockPredictionClient{cc}
}

func (c *stockPredictionClient) GetStock(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (*APIReturn, error) {
	out := new(APIReturn)
	err := c.cc.Invoke(ctx, "/stockapi.StockPrediction/getStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockPredictionServer is the server API for StockPrediction service.
// All implementations must embed UnimplementedStockPredictionServer
// for forward compatibility
type StockPredictionServer interface {
	GetStock(context.Context, *APIRequest) (*APIReturn, error)
	mustEmbedUnimplementedStockPredictionServer()
}

// UnimplementedStockPredictionServer must be embedded to have forward compatible implementations.
type UnimplementedStockPredictionServer struct {
}

func (UnimplementedStockPredictionServer) GetStock(context.Context, *APIRequest) (*APIReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedStockPredictionServer) mustEmbedUnimplementedStockPredictionServer() {}

// UnsafeStockPredictionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockPredictionServer will
// result in compilation errors.
type UnsafeStockPredictionServer interface {
	mustEmbedUnimplementedStockPredictionServer()
}

func RegisterStockPredictionServer(s grpc.ServiceRegistrar, srv StockPredictionServer) {
	s.RegisterService(&StockPrediction_ServiceDesc, srv)
}

func _StockPrediction_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockPredictionServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stockapi.StockPrediction/getStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockPredictionServer).GetStock(ctx, req.(*APIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockPrediction_ServiceDesc is the grpc.ServiceDesc for StockPrediction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockPrediction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stockapi.StockPrediction",
	HandlerType: (*StockPredictionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getStock",
			Handler:    _StockPrediction_GetStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stockapi/stockapi.proto",
}
